
CS 6301.{013,016}: Implementation of advanced DS&A
Project 9 (Type 1)

This project is optional.  Each part is eligible for 0.5 EC.

* If your submit only P9-Basic, then the maximum possible score
  is 100, and no EC will be awarded.

* If you submit only one part of P9 (part a or part b), and P9-Basic,
  then you can get a maximum score of 100 and EC  of 0.5.

* If you submit P9 (both parts), then you can get a maximum score
  of 100 and EC of 1.0.


Ver 1.0: Sat, Nov 8: Initial description.

Code base: Any data structures (built-in or downloaded), graph class and
graph algorithms BFS and DFS.  Do not download code for maximum flows or matching.

Deadlines: 2 AM on Monday: Dec 1 (1st), Dec 8 (2nd), Dec 15 (3rd).
No documentation: -20.  No report: -20.  Not as per i/o specification: -20.
Earn participation credits by posting large test cases (over 10,000 nodes),
with correct output, created by you, on the elearning forum.


In this project, you must implement only the algorithms discussed in
class for the problems.  You can make modifications to make the
algorithms more efficient, but do not implement some other algorithm
(like maximum flow) and use that to fing a matching. 

Part a.
Maximum matching in general graphs:
Implement the algorithm discussed in class to find a maximum matching
in an arbitrary graph G=(V,E).  Your program outputs a maximum
matching as given below.

Input specification:
The input is taken from stdin (standard input), and contains a sequence of
lines.  The first line of input has 2 integers, |V|, and, |E|.  The next
|E| lines of input have 3 integers in each line: u,v,w, indicating an edge
(u,v) of weight w.  
Limits: |V| is between 3 and 1,000,000.  |E| is at most 10,000,000.

Output specification:
The first line of output is the size of a maximum cardinality matching
and the running time of your algorithm in milliseconds.
If |V|<=100, output the nodes in sorted order, and their mates in that
matching.  If a node does not have a mate, print "-" as its mate.


Part b. Maximum weighted matching in bipartite graphs:
Given a bipartite graph G with edge weights, find a maximum weight
matching in it.  Use BFS to test if the input graph is bipartite: 
partition the nodes into V = X U Y, by placing nodes in even layers
in X, and nodes in odd layers in Y.  All edges must connect a node
in X to a node in Y.  If any edge of the graph connected 2 nodes of X,
or 2 nodes of Y, then the graph is not bipartite.  If the graph is
not bipartite, then output the message "G is not bipartite"
and exit.  Otherwise, your program should run the maximum-weight
matching algorithm from class and output a maximum-weight matching.

The input is given using the same format as in part a.  In the
output, print the weight of the matching instead of its cardinality.
For the above sample input, the output for part b is given below:

Sample input:
5 4
1 2 2
3 2 6
3 5 2
4 2 2

Output (part a):
2 <msec>
1 2
2 1
3 5
4 -
5 3

Output (part b):
6 <msec>
1 -
2 3
3 2
4 -
5 -

